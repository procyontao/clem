#!/usr/bin/env python
import numpy as np
from subprocess import *
import sys


s='model2point '+sys.argv[2]+' corr.point'
call(s,shell=True)
f=open("corr.point",'r')
points=f.read()
f.close()
points=points.split()
points=np.asarray(points,dtype='int16')
lenpoints=len(points)
points=points.reshape(lenpoints/3,3)
points=np.delete(points,(2),axis=1)
points=points-1024
points=points.reshape(2,lenpoints/6,2)
one=np.ones((lenpoints/6,1),dtype='int16')
A=np.hstack((points[1],one),)
B1=points[0][:,0]
B2=points[0][:,1]
res1=np.linalg.lstsq(A,B1)
res2=np.linalg.lstsq(A,B2)
f=open("transform.xg",'w')
f.write("   1.0000000   0.0000000   0.0000000   1.0000000       0.000       0.000\n ")
ran=int(sys.argv[4])-1
for i in range(0,ran):
	f.write(str(res1[0][0])+' '+str(res1[0][1])+' '+str(res2[0][0])+' '+str(res2[0][1])+' '+str(res1[0][2])+' '+str(res2[0][2])+'\n')
f.close()
s="newstack -xform transform.xg "+sys.argv[1]+" "+sys.argv[3]
call(s,shell=True)
#s="mrc2tif -s 3.mrc 3"
#call(s,shell=True)
s="rm corr.point"
call(s,shell=True)
f=open("tramsform.log","w")
f.write("\nsum of squared residuals:\n X "+str(res1[1][0])+" Y "+str(res2[1][0])+"\n\n")
f.write("averaged residuals:\n X "+str((res1[1][0]/lenpoints/6)**0.5)+" Y "+str((res2[1][0]/lenpoints/6)**0.5)+"\n\n")
f.write("R squared:\n X "+str(1-res1[1][0]/(B1.size*B1.var()))+"   Y "+str(1-res2[1][0]/(B2.size*B2.var()))+"\n\n")

f.close()
#print "sum of squared residuals X "+str(res1[1])+" Y "+str(res2[1])+"\n\n"
#print "averaged residuals X "+str((res1[1]/lenpoints/6)**0.5)+" Y "+str((res2[1]/lenpoints/6)**0.5)+"\n\n"
#print "R squared X "+str(1-res1[1]/(B1.size*B1.var()))+"   Y "+str(1-res2[1]/(B2.size*B2.var()))+"\n\n"
